package dev.wirlie.bungeecord.glist.config

object Config {
    val COMMAND__GLIST__LABEL = ConfigEntry<String>("command.global-list.label")
    val COMMAND__GLIST__PERMISSION = ConfigEntry<String>("command.global-list.permission")
    val COMMAND__GLIST__ALIASES = ConfigEntry<List<String>>("command.global-list.aliases")
    val FORMATS__GLOBAL_LIST__SERVER_ROW_FORMAT = ConfigEntry<String>("formats.global-list.server-row-format")
    val FORMATS__GLOBAL_LIST__GRAPHIC_BACKGROUND_COLOR = ConfigEntry<String>("formats.global-list.graphic-background-color")
    val FORMATS__GLOBAL_LIST__GRAPHIC_BAR_COLOR = ConfigEntry<String>("formats.global-list.graphic-bar-color")
    val FORMATS__GLOBAL_LIST__FULL_MESSAGE_FORMAT = ConfigEntry<List<String>>("formats.global-list.full-message-format")
    val FORMATS__GLOBAL_LIST__NO_SERVERS_FORMAT = ConfigEntry<String>("formats.global-list.no-servers-format")
    val FORMATS__SERVER_LIST__FULL_MESSAGE_FORMAT = ConfigEntry<List<String>>("formats.server-list.full-message-format")
    val FORMATS__SERVER_LIST__NO_PAGE_DATA_MESSAGE = ConfigEntry<List<String>>("formats.server-list.no-page-data-message")
    val FORMATS__SERVER_LIST__NO_PLAYERS_MESSAGE = ConfigEntry<List<String>>("formats.server-list.no-players-message")
    val FORMATS__SERVER_LIST__PLAYER_ROW_FORMAT = ConfigEntry<String>("formats.server-list.player-row-format")
    val FORMATS__SERVER_LIST__PLAYERS_PER_ROW = ConfigEntry<Int>("formats.server-list.players-per-row")
    val FORMATS__GLOBAL_LIST__SERVER_SP_OPTION__MAIN_FORMAT = ConfigEntry<String>("formats.global-list.server-sp-option.main-format")
    val FORMATS__GLOBAL_LIST__SERVER_SP_OPTION__PLAYERS_FORMAT = ConfigEntry<String>("formats.global-list.server-sp-option.players-format")
    val BEHAVIOUR__CACHE_TIME__PLAYER_LIST_PAGES = ConfigEntry<Int>("behaviour.cache-time.player-list-pages")
    val BEHAVIOUR__GLOBAL_LIST__HIDE_EMPTY_SERVERS = ConfigEntry<Boolean>("behaviour.global-list.hide-empty-servers")
    val BEHAVIOUR__GLOBAL_LIST__MAX_SERVERS_ROWS = ConfigEntry<Int>("behaviour.global-list.max-servers-rows")
    val BEHAVIOUR__GLOBAL_LIST__MIN_PLAYER_COUNT_TO_DISPLAY_SERVER = ConfigEntry<Int>("behaviour.global-list.min-player-count-to-display-server")
    val BEHAVIOUR__SERVER_LIST__PLAYERS_PER_PAGE = ConfigEntry<Int>("behaviour.server-list.players-per-page")
    val BEHAVIOUR__SERVER_LIST__BLACKLISTED_SERVERS = ConfigEntry<List<String>>("behaviour.blacklisted-servers")
    val BEHAVIOUR__GLOBAL_LIST__UPPER_CASE_NAMES = ConfigEntry<Boolean>("behaviour.global-list-uppercase-server-names")
    val BEHAVIOUR__SERVER_LIST__UPPER_CASE_NAME = ConfigEntry<Boolean>("behaviour.server-list-uppercase-server-name")
    val BEHAVIOUR__GROUPS_PREFIX__ENABLE = ConfigEntry<Boolean>("behaviour.groups-prefix.enable")
    val BEHAVIOUR__GROUPS_PREFIX__USE__LUCKPERMS = ConfigEntry<Boolean>("behaviour.groups-prefix.use.luckperms")
    val BEHAVIOUR__GROUPS_PREFIX__USE__INTERNAL_GROUP_SYSTEM = ConfigEntry<Boolean>("behaviour.groups-prefix.use.internal-group-system")
    val BEHAVIOUR__GROUPS_PREFIX__PRIORITY__LUCKPERMS = ConfigEntry<Int>("behaviour.groups-prefix.priority.luckperms")
    val BEHAVIOUR__GROUPS_PREFIX__PRIORITY__INTERNAL_GROUP_SYSTEM = ConfigEntry<Int>("behaviour.groups-prefix.priority.internal-group-system")
    val BEHAVIOUR__PLAYER_STATUS__VANISH__HIDE_VANISHED_USERS = ConfigEntry<Boolean>("behaviour.player-status.vanish.hide-vanished-users")
    val BEHAVIOUR__PLAYER_STATUS__VANISH__BYPASS_PERMISSION = ConfigEntry<String>("behaviour.player-status.vanish.bypass-permission")
    val BEHAVIOUR__PLAYER_STATUS__VANISH__VANISH_PREFIX = ConfigEntry<String>("behaviour.player-status.vanish.vanish-prefix")
    val BEHAVIOUR__PLAYER_STATUS__VANISH__VANISH_PLUGIN = ConfigEntry<String>("behaviour.player-status.vanish.vanish-plugin")
    val BEHAVIOUR__PLAYER_STATUS__AFK__SHOW_AFK_STATE = ConfigEntry<Boolean>("behaviour.player-status.afk.show-afk-state")
    val BEHAVIOUR__PLAYER_STATUS__AFK__AFK_PREFIX = ConfigEntry<String>("behaviour.player-status.afk.afk-prefix")
    val MESSAGES__CANNOT_FOUND_SERVER = ConfigEntry<String>("messages.cannot-found-server")
    val MESSAGES__PREVIOUS_PAGE_HOVER_MESSAGE = ConfigEntry<String>("messages.previous-page-hover-message")
    val MESSAGES__NEXT_PAGE_HOVER_MESSAGE = ConfigEntry<String>("messages.next-page-hover-message")
    val MESSAGES__PREVIOUS_PAGE = ConfigEntry<String>("messages.previous-page")
    val MESSAGES__NEXT_PAGE = ConfigEntry<String>("messages.next-page")
    val MESSAGES__NO_PREVIOUS_PAGE = ConfigEntry<String>("messages.no-previous-page")
    val MESSAGES__NO_NEXT_PAGE = ConfigEntry<String>("messages.no-next-page")
    val MESSAGES__ALL_PAGES = ConfigEntry<String>("messages.all-pages")
    val MESSAGES__CLICK_TO_SHOW_PLAYERS = ConfigEntry<String>("messages.click-to-show-players")
    val UPDATES__CHECK_UPDATES = ConfigEntry<Boolean>("updates.check-updates")
    val UPDATES__NOTIFY__ENABLE = ConfigEntry<Boolean>("updates.notify.enable")
    val UPDATES__NOTIFY__PERMISSION = ConfigEntry<String>("updates.notify.permission")
    val UPDATES__NOTIFY__MESSAGE = ConfigEntry<List<String>>("updates.notify.message")
    val UPDATES__NOTIFY__DELAY_MS = ConfigEntry<Int>("updates.notify.delay-ms")
    val SERVERS__GROUPS = ConfigEntry<List<Map<String, Any>>>("servers.groups")
}
